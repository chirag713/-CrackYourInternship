class Solution {
public:
    // Compare operator precedence: returns true if op1 has higher or equal precedence over op2
    bool compare(char op1, char op2) {
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) {
            return true;
        }
        return false;
    }

    char popOperator(stack<char>& ops) {
        char op = ops.top();
        ops.pop();
        return op;
    }

    int popNumber(stack<int>& nums) {
        int num = nums.top();
        nums.pop();
        return num;
    }

    int calculate(char op, int b, int a) {
        switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        }
        return 0; // Shouldn't reach here
    }

    int calculate(string s) {
        if (s.size() == 0) return 0;

        stack<int> nums;
        stack<char> ops;
        int current = 0;
        bool processingNumber = false;

        for (int i = 0; i < s.size(); i++) {
            char c = s[i];
            
            if (isdigit(c)) {
                current = current * 10 + (c - '0');
                processingNumber = true;
            } 
            else if (c == '+' || c == '-' || c == '*' || c == '/') {
                if (processingNumber) {
                    nums.push(current);
                    current = 0;
                    processingNumber = false;
                }
                
                while (!ops.empty() && compare(ops.top(), c)) {
                    nums.push(calculate(popOperator(ops), popNumber(nums), popNumber(nums)));
                }
                ops.push(c);
            }
        }

        // Push the last number to the stack, if any
        if (processingNumber) {
            nums.push(current);
        }

        // Process the remaining operators
        while (!ops.empty()) {
            nums.push(calculate(popOperator(ops), popNumber(nums), popNumber(nums)));
        }

        return nums.top();
    }
};
