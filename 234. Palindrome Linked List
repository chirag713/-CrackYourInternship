/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head or !head->next) return head;
        ListNode *prev = NULL, *curr = head, *next = NULL;
        while(curr){
            ListNode *temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        cout<<prev->val;
        cout<<prev->next->val;
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* list1 = head;
        ListNode* list2 = reverseList(head);

        cout<<list1->val;
        if(list1->next)
        cout<<list1->next->val;
        
        while(list1 && list2){
            if(list1->val != list2->val) return false;
            list1 = list1->next;
            list2 = list2->next;
        }
        return true;
    }
};
