class Solution {
public:
    void merge(vector<int> &v, int low, int mid, int high){
        vector<int> temp;
        int left=low, right=mid+1;
        while(left<=mid && right<=high){
            if(v[left]>v[right]){
                temp.push_back(v[right]);
                right++;
            }
            else{
                temp.push_back(v[left]);
                left++;
            }
        }
        while(left<=mid){
            temp.push_back(v[left++]);
        }
        while(right<=high) temp.push_back(v[right++]);

        for(int i=low; i<=high ; i++){
            v[i]=temp[i-low];
        }
    }

    int reversePair(vector<int> &v, int low, int mid, int high){
        int right=mid+1;
        int cnt=0;
        for(int i=low; i<=mid ;i++){
            while(right <= high && v[i]> 2LL*v[right]) right++;
            cnt+=(right-(mid+1));
        }
        return cnt;
    }

    int mergeSort(vector<int> &v, int low, int high){
        int cnt=0;
        if(low>=high) return cnt;
        int mid=(high-low)/2 +low;
        cnt+=mergeSort(v,low,mid);
        cnt+=mergeSort(v,mid+1,high);
        cnt+=reversePair(v, low, mid, high);
        merge(v, low, mid, high);
        return cnt;
    }

    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size()-1);
    }
};
